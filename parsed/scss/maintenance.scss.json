{
  "maintenance.scss": "@import \"tools/tools\";\r\n\r\n* {\r\n    box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n    -webkit-align-items: center;\r\n    align-items: center;\r\n    background: #888 url(\"../img/coming-soon.jpg\") no-repeat center center;\r\n    background-size: cover;\r\n\r\n    -ms-box-orient: horizontal;\r\n    color: #798289;\r\n    display: -webkit-flex;\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    -ms-flex-align: center;\r\n    -ms-flex-pack: space-around;\r\n    font-family: Helvetica, Arial, Sans-Serif;\r\n    font-size: 0.8em;\r\n    height: 100vh;\r\n\r\n    -webkit-justify-content: space-around;\r\n    justify-content: space-around;\r\n    line-height: 1.5em;\r\n    margin: 0;\r\n    min-height: 480px;\r\n    min-width: 320px;\r\n    padding: 20px 30px;\r\n}\r\n\r\nmain {\r\n  background-color: #fff;\r\n  box-shadow: 0 2px 0 0 rgba(0, 0, 0, 0.07);\r\n  display: block;\r\n  padding: 20px 30px;\r\n  text-align: center;\r\n}\r\n\r\n.header-logo-image-container{\r\n    width: get-width(stencilString('logo_size'));\r\n    margin: auto;\r\n}\r\n\r\n.logo{flex: 1 1 100%; margin-bottom: 20px;}\r\n.logo img{max-width: 100%;}\r\n\r\nsection {\r\n    margin-bottom: 40px;\r\n}\r\n\r\nfieldset {\r\n    border: 0;\r\n    padding: 0;\r\n}\r\n\r\nlegend {\r\n    border: 0;\r\n    clip: rect(0 0 0 0);\r\n    height: 1px;\r\n    margin: -1px;\r\n    overflow: hidden;\r\n    padding: 0;\r\n    position: absolute !important;\r\n    width: 1px;\r\n}\r\n\r\nlabel,\r\ninput {\r\n    display: block;\r\n    height: 30px;\r\n    line-height: 30px;\r\n    width: 100%;\r\n}\r\n\r\nlabel {\r\n    color: #313b47;\r\n    font-size: 14px;\r\n    font-weight: bold;\r\n    text-align: center;\r\n}\r\n\r\ninput {\r\n    -webkit-appearance: none;\r\n    border-radius: 2px;\r\n    border-style: solid;\r\n    width: 100%;\r\n}\r\n\r\ninput[type=text] {\r\n    background-color: #f7f8f9;\r\n    border: 1px solid #e1e6eb;\r\n    margin-bottom: 1rem;\r\n    padding: 0 1em;\r\n}\r\n\r\ninput[type=submit] {\r\n    background: #00abc9;\r\n    border: 0;\r\n    color: #fff;\r\n    cursor: pointer;\r\n    font-size: 12px;\r\n    padding: 0 15px;\r\n}\r\n\r\na {\r\n    color: #00b9d3;\r\n    margin: 0 5px;\r\n    text-decoration: none;\r\n}\r\n\r\nh1 {\r\n    color: #3c4043;\r\n    font-size: 24px;\r\n    font-weight: 300;\r\n    margin-top: 15px;\r\n}\r\n\r\ndiv p {\r\n    margin-bottom: 0;\r\n    margin-top: 0;\r\n}\r\n\r\n.form-field--error {\r\n    margin-bottom: 1rem;\r\n}\r\n\r\n.form-field--error input[type=text] {\r\n    margin-bottom: 0;\r\n}\r\n\r\n.form-field--error .form-inlineMessage {\r\n    color: #ac0005;\r\n    margin-top: 0.375rem;\r\n    width: 100%;\r\n}\r\n\r\n.powered-by {\r\n    color: #acb3be;\r\n    font-size: 11px;\r\n    font-style: italic;\r\n    line-height: 24px;\r\n}\r\n\r\n.powered-by a {\r\n    background: url(\"../img/bc_logo_sprite.png\") 0 -75px no-repeat;\r\n    display: inline-block;\r\n    height: 22px;\r\n    opacity: 0.7;\r\n    text-indent: -9999px;\r\n    width: 95px;\r\n}\r\n\r\n.powered-by a:hover {\r\n    opacity: 1;\r\n}\r\n\r\n@media screen and (min-width: 540px) {\r\n    body {\r\n        font-size: 1em;\r\n    }\r\n\r\n    main {\r\n        margin: 0 auto;\r\n        padding: 45px 60px;\r\n        width: 500px;\r\n    }\r\n\r\n    label,\r\n    input {\r\n        display: inline-block;\r\n        margin-right: 10px;\r\n        width: auto;\r\n    }\r\n\r\n    label {\r\n        text-align: left;\r\n    }\r\n\r\n    input[type=text] {\r\n        margin-bottom: 0;\r\n        margin-right: 10px;\r\n    }\r\n\r\n    .form-field {\r\n        display: inline-block;\r\n        position: relative;\r\n    }\r\n\r\n    .form-field--error .form-inlineMessage {\r\n        left: 100px;\r\n        position: absolute;\r\n        top: 30px;\r\n    }\r\n}\r\n",
  "tools/tools.scss": "@import \"list\";\r\n@import \"string\";\r\n@import \"image\";\r\n@import \"theme_focus\";\r\n",
  "tools/list.scss": "@function contains($list, $var) {\r\n    @return index($list, $var) != null;\r\n}\r\n",
  "tools/theme_focus.scss": "// =============================================================================\r\n// THEME FOCUS (global)\r\n// =============================================================================\r\n\r\n$outline-width:  stencilString('focus_outline');\r\n$outline-style:  solid;\r\n$outline-color:  #0f7fff;\r\n$outline-offset: 1px;\r\n\r\ninput,\r\nbutton,\r\ntextarea,\r\nselect,\r\ndetails,\r\n[href],\r\n[tabindex]:not([tabindex=\"-1\"]),\r\n[contenteditable=\"true\"] {        \r\n    &:focus {\r\n        outline: $outline-width $outline-style $outline-color !important;\r\n        outline-offset: $outline-offset !important;        \r\n    }\r\n}\r\n\r\nlabel {\r\n    input:focus + & {\r\n        outline: $outline-width $outline-style $outline-color !important;\r\n        outline-offset: $outline-offset !important;        \r\n    }\r\n}\r\n",
  "tools/string.scss": "// http://sassmeister.com/gist/1b4f2da5527830088e4d\r\n@function str-replace($string, $search, $replace: \"\") {\r\n    $index: str-index($string, $search);\r\n\r\n    @if $index {\r\n        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\r\n    }\r\n\r\n    @return $string;\r\n}\r\n\r\n// https://stackoverflow.com/questions/32376461/how-to-split-a-string-into-two-lists-of-numbers-in-sass\r\n///\r\n/// Split `$string` into a list of two strings at the first occurrence of `$separator`.\r\n///\r\n/// @param {String} $string - The string to be split\r\n/// @param {String} $separator - Character indicating where the split should occur\r\n///\r\n/// @return {List} - A list of the two created strings. The second string will be null if `$separator` is not found.\r\n///\r\n@function str-split($string, $separator) {\r\n\r\n    $index: str-index($string, $separator);\r\n\r\n    @if not $index {\r\n        @return $string \"\";\r\n    }\r\n\r\n    $str-1: str-slice($string, 1, $index - 1);\r\n    $str-2: str-slice($string, $index + 1);\r\n\r\n    @return $str-1 $str-2;\r\n}\r\n\r\n// https://www.sassmeister.com/gist/9fa19d254864f33d4a80\r\n///\r\n/// Converts a String representation of a number into a Number\r\n///\r\n/// @param {String} $value - The String to be converted\r\n///\r\n/// @return {Number} - The converted Number\r\n///\r\n@function to-number($value) {\r\n    @if type-of($value) == \"number\" {\r\n        @return $value;\r\n    } @else if type-of($value) != \"string\" {\r\n        $_: log(\"Value for `to-number` should be a number or a string.\");\r\n    }\r\n\r\n    $result: 0;\r\n    $digits: 0;\r\n    $minus: str-slice($value, 1, 1) == \"-\";\r\n    $numbers: (\"0\": 0, \"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9);\r\n\r\n    @for $i from if($minus, 2, 1) through str-length($value) {\r\n        $character: str-slice($value, $i, $i);\r\n\r\n        @if not (index(map-keys($numbers), $character) or $character == \".\") {\r\n            @return to-length(if($minus, -$result, $result), str-slice($value, $i));\r\n        }\r\n\r\n        @if $character == \".\" {\r\n            $digits: 1;\r\n        } @else if $digits == 0 {\r\n            $result: $result * 10 + map-get($numbers, $character);\r\n        } @else {\r\n            $digits: $digits * 10;\r\n            $result: $result + map-get($numbers, $character) / $digits;\r\n        }\r\n    }\r\n\r\n    @return if($minus, -$result, $result);\r\n}\r\n\r\n\r\n///\r\n/// Add `$unit` to `$value`\r\n///\r\n/// @param {Number} $value - Value to add unit to\r\n/// @param {String} $unit - String representation of the unit\r\n///\r\n/// @return {Number} - `$value` expressed in `$unit`\r\n///\r\n@function to-length($value, $unit) {\r\n    $units: (\"px\": 1px, \"cm\": 1cm, \"mm\": 1mm, \"%\": 1%, \"ch\": 1ch, \"pc\": 1pc, \"in\": 1in, \"em\": 1em, \"rem\": 1rem, \"pt\": 1pt, \"ex\": 1ex, \"vw\": 1vw, \"vh\": 1vh, \"vmin\": 1vmin, \"vmax\": 1vmax);\r\n\r\n    @if not index(map-keys($units), $unit) {\r\n        $_: log(\"Invalid unit `#{$unit}`.\");\r\n    }\r\n\r\n    @return $value * map-get($units, $unit);\r\n}\r\n",
  "tools/image.scss": "///\r\n/// Calculate the required `padding-bottom` value to reserve page space for an image of a given size, represented by `$size`.\r\n///\r\n/// @param {String} $size - A string of the form 'XxY', where 'X' and 'Y' are integers.\r\n///\r\n/// @return {Number} - A percentage indicating the appropriate value of `padding-bottom`.\r\n///\r\n@function get-padding($size) {\r\n    $list: str-split($size, \"x\");\r\n\r\n    $width: to-number(nth($list, 1));\r\n    $height: to-number(nth($list, 2));\r\n\r\n    @return percentage($height/$width);\r\n}\r\n\r\n///\r\n/// Returns a string representing the width (in pixels) of an image with size `$size`.\r\n///\r\n/// @param {String} $size - A string of the form 'XxY', where 'X' and 'Y' are integers.\r\n///\r\n/// @return {String} - A string of the form 'Xpx'\r\n///\r\n@function get-width($size) {\r\n    $list: str-split($size, \"x\");\r\n\r\n    @return nth($list, 1) + \"px\";\r\n}\r\n\r\n///\r\n/// Returns a string representing the width (in pixels) of an image with size `$size`.\r\n///\r\n/// @param {String} $size - A string of the form 'XxY', where 'X' and 'Y' are integers.\r\n///\r\n/// @return {String} - A string of the form 'Ypx'\r\n///\r\n@function get-height($size) {\r\n    $list: str-split($size, \"x\");\r\n\r\n    @return nth($list, 2) + \"px\";\r\n}\r\n"
}
